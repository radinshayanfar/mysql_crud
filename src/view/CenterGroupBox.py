# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'centerGroupBox.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtWidgets, QtCore
from PyQt5.QtWidgets import QGroupBox, QPushButton, QGridLayout, QLabel, QLineEdit


class CenterGroupBox(QGroupBox):
    def __init__(self, parent):
        super().__init__(parent)
        self.setTitle("Table")

        self.tableGridLayout = QGridLayout()
        self.tableGridLayout.setObjectName("tableGridLayout")
        self.insertGridLayout = QGridLayout()
        self.insertGridLayout.setObjectName("insertGridLayout")

        layoutForSpacer = QGridLayout(self)
        layoutForSpacer.addLayout(self.tableGridLayout, 0, 0, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        layoutForSpacer.addItem(spacerItem, 1, 0, 1, 1)
        layoutForSpacer.addLayout(self.insertGridLayout, 2, 0, 1, 1)

    def buildTable(self, columns, rows, crud_callback, pagination_callback, prev_en, next_en):
        self._deleteAll()

        for i, column in enumerate(columns):
            self.tableGridLayout.addWidget(QLabel(column), 0, i)

        prev = QPushButton("Previous")
        next = QPushButton("Next")
        prev.clicked.connect(lambda: pagination_callback("prev"))
        next.clicked.connect(lambda: pagination_callback("next"))
        prev.setEnabled(prev_en)
        next.setEnabled(next_en)
        prev.setStatusTip("Previous page")
        next.setStatusTip("Next page")
        self.tableGridLayout.addWidget(prev, 0, i + 1)
        self.tableGridLayout.addWidget(next, 0, i + 2)

        for r_index, row in enumerate(rows):
            line = []
            for c_index, field in enumerate(row):
                edit = QLineEdit(str(field))
                edit.returnPressed.connect(lambda r=r_index: crud_callback("update", r))
                line.append(edit)
                self.tableGridLayout.addWidget(edit, r_index + 1, c_index)
            update = QPushButton("Update")
            delete = QPushButton("Delete")
            update.clicked.connect(lambda _, r=r_index: crud_callback("update", r))
            delete.clicked.connect(lambda _, r=r_index: crud_callback("delete", r))
            self.tableGridLayout.addWidget(update, r_index + 1, c_index + 1)
            self.tableGridLayout.addWidget(delete, r_index + 1, c_index + 2)
            self.tableLineEdits.append(line)
            # self.updateButtons.append(update)
            # self.updateButtons.append(delete)

        for i, column in enumerate(columns):
            edit = QLineEdit()
            edit.setPlaceholderText(column)
            edit.returnPressed.connect(lambda: crud_callback("insert"))
            self.insertLineEdits.append(edit)
            self.insertGridLayout.addWidget(edit, 0, i)
        insert = QPushButton("Insert")
        insert.clicked.connect(lambda: crud_callback("insert"))
        self.insertGridLayout.addWidget(insert, 0, i + 1)

    def _deleteAll(self):
        for i in reversed(range(self.tableGridLayout.count())):
            self.tableGridLayout.itemAt(i).widget().deleteLater()
        for i in reversed(range(self.insertGridLayout.count())):
            self.insertGridLayout.itemAt(i).widget().deleteLater()
        self.tableLineEdits = []
        self.insertLineEdits = []
        # self.updateButtons = []
        # self.deleteButtons = []
